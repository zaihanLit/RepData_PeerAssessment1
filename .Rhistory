names(airquality)
may <- subset(airquality, month == 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(h = median(airquality$Wind), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1, 2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind"))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
quit()
?read.table
alldata <- read.table(file = "household_power_consumption.txt", header = true, sep = ";")
alldata <- read.table(file = "household_power_consumption.txt", header = TRUE, sep = ";")
head alldata
head(alldata)
dim(alldata)
str(alldata)
alldata <- read.table(file = "household_power_consumption.txt", header = TRUE, sep = ";", as.is = c(Date)
)
alldata <- read.table(file = "household_power_consumption.txt", header = TRUE, sep = ";", as.is = c("Date"))
str(alldata)
alldata <- read.table(file = "household_power_consumption.txt", header = TRUE, sep = ";", colClasses  = c("Date", "Time", "num", "num", "num", "num", "num", "num", "num"))
alldata <- read.table(file = "household_power_consumption.txt", header = TRUE, sep = ";", colClasses  = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
alldata <- read.table(file = "household_power_consumption.txt", header = TRUE, sep = ";", colClasses  = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
alldata <- read.table(file = "household_power_consumption.txt", header = TRUE, sep = ";", colClasses  = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"), na.strings = "?")
str(alldata)
head(alldata)
source('~/Rworkdir/ExData_Plotting1/plot1.R')
str(alldata)
subset(alldata, Voltage == "NA")
subset(alldata, Voltage == NA)
subset(alldata, Global_intensity == NA)
subset(alldata, Sub_metering_1 == NA)
subset(alldata, Sub_metering_1 == "NA")
summary(alldata$Sub_metering_3)
summary(alldata$Sub_metering_2)
summary(alldata$Sub_metering_1)
summary(alldata$Global_active_power)
summary(alldata$Voltage)
head(alldata, 100)
subset(alldata, is.na(Voltage))
head(subset(alldata, is.na(Voltage)))
head(alldata)
str(alldata)
strptime("17:24:00")
?strptime
strptime("17:24:00", format = "%H:%M:%S")
strptime("16/12/2006 17:24:00", format = "%d/%m/%Y %H:%M:%S")
twodaydata <- subset(alldata, (Date == 01/02/2007) | (Data == 02/02/2007))
twodaydata <- subset(alldata, (Date == 01/02/2007) | (Date == 02/02/2007))
head(twodaydata)
twodaydata <- subset(alldata, Date == 01/02/2007)
twodaydata <- subset(alldata, (Date == "01/02/2007") | (Date == "02/02/2007"))
twodaydata <- subset(alldata, Date == "01/02/2007)
)
""
""
twodaydata <- subset(alldata, Date == "01/02/2007")
twodaydata <- subset(alldata, Date == "16/12/2006")
twodaydata <- subset(alldata, Date == "01/02/2006")
View(alldata)
twodaydata <- subset(alldata, (Date == "1/2/2007") | (Date == "2/2/2007"))
names(twodaydata)
DateTime <- with(twodaydata, paste(Date, Time))
cleandata <- data.frame(Time = DateTime, subset(twodaydata, select = Global_active_power:Sub_metering_3))
head(cleandata)
charTime <- with(twodaydata, paste(Date, Time))
DateTime <- strptime(charTime, format = "%d/%m/%Y %H:%M:%S")
str(DateTime)
cleandata <- data.frame(Time = DateTime, subset(twodaydata, select = Global_active_power:Sub_metering_3))
str(cleandata)
hist(cleandata$Global_active_power)
title(main = "Global Active Power")
hist(cleandata$Global_active_power, main = "Global Active Power")
hist(cleandata$Global_active_power, main = "Global Active Power", col = "red")
hist(cleandata$Global_active_power, main = "Global Active Power", col = "red", xlab = "Global Active Power (killowatts)")
hist(cleandata$Global_active_power, main = "Global Active Power", col = "red", xlab = "Global Active Power (killowatts)", ylim = c(0, 1200))
hist(cleandata$Global_active_power, main = "Global Active Power", col = "red", xlab = "Global Active Power (killowatts)")
png(filename = "plot1.png", width = 480, height = 480)
hist(cleandata$Global_active_power, main = "Global Active Power", col = "red", xlab = "Global Active Power (killowatts)")
dev.off()
with(cleandata, plot(Time, Global_active_power))
with(cleandata, plot(Time, Global_active_power), type = "l")
with(cleandata, plot(Time, Global_active_power), type = "h")
plot(sin, -pi, 2*pi)
with(cleandata, plot(Time, Global_active_power), type = "b")
with(cleandata, plot(Time, Global_active_power), type = "c")
with(cleandata, plot(Time, Global_active_power), type = "o")
with(cleandata, plot(Time, Global_active_power), type = "s")
with(cleandata, plot(Time, Global_active_power), type = "S")
with(cleandata, plot(Time, Global_active_power), type = "n")
with(cleandata, plot(Time, Global_active_power), type = "n")
with(cleandata, plot(Time, Global_active_power), type = "n")
plot(sin, -pi, 2*pi)
with(cleandata, barplot(Time, Global_active_power))
barplot(DateTime)
plot(cleandata$Global_active_power)
barplot(cleandata$Global_active_power)
with(cleandata, barplot(cbind(Time, Global_active_power)))
barplot(cleandata$Global_active_power)
barplot(cleandata$Global_active_power, col ="white")
barplot(cleandata$Global_active_power, beside = TRUE)
barplot(cleandata$Global_active_power, beside = FALSE)
barplot(cleandata$Global_active_power, border = NA)
barplot(cleandata$Global_active_power, border = TRUE)
plot
lines()
plot()
with(cleandata, plot(Time, Global_active_power), type = "n")
with(cleandata, plot(Time, Global_active_power, type = "l"))
plot(1:2, xaxs = "i")
with(cleandata, plot(Time, Global_active_power, type = "l", xaxt = "n"))
SEQ <- seq(min(cleandata$Time), max(cleandata$Time), by="days")
axis.POSIXct(SEQ, at=SEQ, side=1, format="%b %d")
quit()
ls()
dir()
source("./ExData_Plotting1/plot2.R")
Sys.setenv("LANGUAGE"="En")
Sys.setlocale("LC_ALL", "English")
source("./ExData_Plotting1/plot2.R")
Sys.getlocale()
Sys.getlocale(category = "LC_ALL")
Sys.setlocale("LC_ALL", "english")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
source("./ExData_Plotting1/plot2.R")
source("./ExData_Plotting1/plot3.R")
source("./ExData_Plotting1/plot4.R")
quit()
colors()
library(swirl)
swirl()
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0, 1, length = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, alpha = 0.3))
cols <- brewer.pal(3, "BuGn")
cols
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
12
abline(h = 0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
distmt
quit()
library(swirl)
swirl()
cmat
plot(cx, cy, col=c("red","orange","purple"), pch=3, cex =2, lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers, col=c("black",
"red","green"), pch = 3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2 <- svd(constantMatrix)
svd2$d
svd2$[,1]
svd2$v[,1]
svd2$v[,1:2]
svd2$s
svd2$d
dim(faceData)
a1<a
a1<-a
a1 <- s
a
s
e
nxt()
svd1$u[,1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2,1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% svd1$d[,1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon))
mdist <- dist((sub1[,10:12], maxCon))
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size=49)
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
?hclust()
?dist()
library(datasets)
ls()
mat
dist(mat)
hclust(dist(mat))
plot(hclust(dist(mat)))
dataMatrix
dist(dataMatrix)
hclust(dist(dataMatrix))
plot(hclust(dist(dataMatrix)))
heatmap(dataMatrix)
heatmap(dataMatrix)
heatmap(dataMatrix)
heatmap(dataMatrix)
kmeans(dataMatrix, centers = 4)
?image()
?image
?order
?image
image(t(volcano)[ncol(volcano):1,])
image(volcano[ncol(volcano):1,])
image(volcano[,nrow(volcano):1])
image(t(volcano)[,nrow(volcano):1])
image(t(volcano)[ncol(volcano):1,])
image(1:4,1:4)
x <- 10*(1:nrow(volcano))
y <- 10*(1:ncol(volcano))
image(x, y, volcano, col = terrain.colors(100), axes = FALSE)
dim(volcano)
image(t(volcano)[ncol(volcano):1,])
image(volcano)
image(t(volcano)[ncol(volcano):1,])
image(volcano)
names(volcano)
volcano
image(t(volcano)[ncol(volcano):1,])
image(t(volcano))
image(t(volcano))
image(t(volcano)[ncol(volcano):1,])
image(t(volcano))
image(volcano)
image(volcano)
image(t(volcano))
image(volcano)
constantMatrix <- dataMatrixOrdered*0
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0,1),each=5)}
constantMatrix
image(constantMatrix)
image(t(constantMatrix)
)
image(t(constantMatrix)
)
image(constantMatrix)
?diag
quit()
?solve
quit()
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
library(rvest)
install.packages("installr")
installed.packages()
oldip <- installed.packages()[,1]
save(oldip, file = "installedPackages.Rdata")
quit()
version()
version
library(rvest)
install.packages("rvest")
getwd()
dir()
load("installedPackages.Rdata")
newip <- installed.packages()[,1]
for(i in setdiff(oldip, newip)) install.packages(i)
quit()
weekdays()
?weekdays
weekdays(2016-09-09)
weekdays("2016-09-09")
date()
weekdays(date())
weekdays(as.date(2016-09-09))
weekdays(as.Date(2016-09-09))
weekdays(as.Date("2016-09-09"))
weekdays(as.Date("2016-09-09"))
weekdays(as.Date("2016-09-09")) >0
weekdays(as.Date("2016-09-09")) <5
weekdays(as.Date("2016-09-09")) == 5
weekdays(as.Date("2016-09-09")) = 5
weekdays(as.Date("2016-09-09")) == 6
weekdays(as.Date("2016-09-09")) == 4
weekdays(as.Date("2016-09-09")) == 3
weekdays(as.Date("2016-09-09")) == 2
weekdays(as.Date("2016-09-09")) == 1
weekdays(as.Date("2016-09-09")) == 0
weekdays(as.Date("2016-09-09")) >0
weekdays(as.Date("2016-09-09")) >7
class(weekdays(as.Date("2016-09-09")) )
as.numeric(weekdays(as.Date("2016-09-09")) )
weekdays(as.Date("2016-09-09"))
indexwdays(as.Date("2016-09-09"))
indexwday(as.Date("2016-09-09"))
library(xts)
as.xts("2016-09-09")
as.xts(as.Date("2016-09-09")
)
x <- as.xts(as.Date("2016-09-09"))
x[.indexwday(x) %in% 1:5]
.indexday(x)
.indewday(x)
.indexwday(x)
indexwday
.indexwday(x)
?.indexwday
if (!file.exists("activity.csv")) unzip("activity.zip")
getwd()
dir()
setwd("RepData_PeerAssessment1")
dir()
if (!file.exists("activity.csv")) unzip("activity.zip")
rawdata <- read.csv("activity.csv")
totalstep <- tapply(rawdata[,1], rawdata[,2], sum, na.rm = TRUE)
hist(totalstep)
meanstep <- mean(totalstep)
medianstep <- median(totalstep)
averagestep <- tapply(rawdata[,1], rawdata[,3], mean, na.rm=TRUE)
plot(names(averagestep), averagestep, type="l", xlab = "5-minute interval", ylab = "average number of steps taken")
maxinterval <- names(which.max(averagestep))
maxstep <- max(averagestep)
numofNA <- sum(is.na(rawdata[,1]))
newdata <- rawdata
newdata[is.na(newdata[,1]), 1] <- averagestep[dimnames = as.character(newdata[is.na(newdata[,1]), 3])]
totalstep <- tapply(newdata[,1], newdata[,2], sum, na.rm = TRUE)
hist(totalstep)
meanstep <- mean(totalstep)
medianstep <- median(totalstep)
?as.factor
View(newdata)
View(newdata)
isweekday <- (.indexwday(as.xts(as.Date(newdata[,2]))) %in% 1:5)
as.numeric(isweekday)
isweekday <- as.numeric(.indexwday(as.xts(as.Date(newdata[,2]))) %in% 1:5)
factor(isweekday, levels = c(1,0), labes = c("weekday","weekend"))
factor(isweekday, levels = c(1,0), labels = c("weekday","weekend"))
newdata$daytype <- factor(isweekday, levels = c(1,0), labels = c("weekday","weekend"))
View(newdata)
View(newdata)
class(newdata$daytype)
?tapply
newdata[,3:4]
tapply(newdata[,1], newdata[,3:4], mean)
class(tapply(newdata[,1], newdata[,3:4], mean))
as.dataframe(tapply(newdata[,1], newdata[,3:4], mean))
as.data.frame(tapply(newdata[,1], newdata[,3:4], mean))
averagestep2 <- as.data.frame(tapply(newdata[,1], newdata[,3:4], mean))
averagestep2[,1]
averagestep2 <- tapply(newdata[,1], newdata[,3:4], mean)
averagestep2$interval
averagestep2$inteval
View(averagestep2)
class(averagestep2)
str(averagestep2)
averagestep2 <- as.data.frame(tapply(newdata[,1], newdata[,3:4], mean))
names(averagestep2)
rownames(averagestep2)
averagestep2$interval <- rownames(averagestep2)
head(averagestep2)
library(tidyr)
?gather
gather(averagestep2, daytype, steps, -interval)
steps_data <- gather(averagestep2, daytype, steps, -interval)
xyplot
xyplot()
library(lattice)
xyplot(steps ~ interval|daytype, data = steps_data, layout = c(1,2))
xyplot(steps ~ interval|daytype, data = steps_data, layout = c(1,2), panel = function(x,y,...) {})
xyplot(steps ~ interval|daytype, data = steps_data, layout = c(1,2), panel = function(x,y,...) {})
xyplot(steps ~ interval|daytype, data = steps_data, layout = c(1,2), panel = function(x,y,...) {
panel.xyplot(x,y,...)
})
steps_data
class(steps_data)
str(steps_data)
?xyplot
xyplot(steps ~ interval|daytype, data = steps_data, layout = c(1,2), type = "l")
plot(steps_data$interval, steps_data$steps)
xyplot(steps ~ interval | daytype, steps_data, layout = c(1,2), type = "l")
plot(steps_data$interval, steps_data$steps, type = "l")
xyplot(steps ~ interval , steps_data, layout = c(1,2), type = "l")
xyplot(steps ~ interval , data=steps_data, layout = c(1,2), type = "l")
?xyplot
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
str(airquality)
str(steps_data)
steps_data <- transform(steps_data, daytype = factor(daytype))
str(steps_data)
xyplot(steps ~ interval | daytype, steps_data, layout = c(1,2), type = "l")
str(airquality)
xyplot(steps ~ interval | daytype, steps_data)
plot(steps_data$interval, steps_data$steps, type = "l")
library(ggplot2)
?qplot
qplot(interval, steps, data = steps_data, geom = "l", facets = .~daytype)
qplot(interval, steps, data = steps_data, geom = "line", facets = .~daytype)
qplot(interval, steps, data = steps_data, geom = "line", facets = . ~ daytype)
?xyplot
as.numeric(steps_data$interval)
steps_data <- transform(steps_data, interval = as.numeric(interval))
str(steps_data)
qplot(interval, steps, data = steps_data, geom = "line", facets = . ~ daytype)
xyplot(steps ~ interval | daytype, steps_data, layout = c(1,2), type = "l")
